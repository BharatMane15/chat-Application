{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","ChattingPic.png","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","NoChat.gif","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","style","marginTop","background","color","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","className","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","window","location","reload","Homepage","display","justifyContent","alignContent","aliginItems","src","ChattingPng","alt","height","margin","Container","maxW","Box","d","w","m","borderRadius","Text","fontSize","fontWeight","fontFamily","bg","borderWidth","Tabs","isFitted","variant","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","md","ModalFooter","ScrollableChat","ScrollableFeed","map","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","colorScheme","CloseIcon","pl","UserListItem","_hover","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","flexDirection","noChat","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","GroupChatModal","_searchResult$filter","_searchResult$filter$","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","some","selected","slice","handleGroup","userToAdd","MyChats","setLoggedUser","searchedValue","setSearchedValue","fetchChats","filteredData","item","userMatch","ur","toLowerCase","chatNameMatch","focusBorderColor","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.07451fae.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        // colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15, background: \"#17c3ce\", color: \"white\" }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n      window.location.reload();\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"bharat-chat-app\");\n      fetch(\"https://api.cloudinary.com/v1_1/bharat-chat-app/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <div className=\"SignupWrapper\">\n      <VStack spacing=\"5px\">\n        <FormControl id=\"first-name\" isRequired>\n          <FormLabel>Name</FormLabel>\n          <Input\n            placeholder=\"Enter Your Name\"\n            onChange={(e) => setName(e.target.value)}\n          />\n        </FormControl>\n        <FormControl id=\"email\" isRequired>\n          <FormLabel>Email Address</FormLabel>\n          <Input\n            type=\"email\"\n            placeholder=\"Enter Your Email Address\"\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </FormControl>\n        <FormControl id=\"password\" isRequired>\n          <FormLabel>Password</FormLabel>\n          <InputGroup size=\"md\">\n            <Input\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Enter Password\"\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                {show ? \"Hide\" : \"Show\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n        <FormControl id=\"password\" isRequired>\n          <FormLabel>Confirm Password</FormLabel>\n          <InputGroup size=\"md\">\n            <Input\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Confirm password\"\n              onChange={(e) => setConfirmpassword(e.target.value)}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                {show ? \"Hide\" : \"Show\"}\n              </Button>\n            </InputRightElement>\n          </InputGroup>\n        </FormControl>\n        <FormControl id=\"pic\">\n          <FormLabel>Upload your Picture</FormLabel>\n          <Input\n            type=\"file\"\n            p={1.5}\n            accept=\"image/*\"\n            onChange={(e) => postDetails(e.target.files[0])}\n          />\n        </FormControl>\n        <Button\n          width=\"100%\"\n          style={{ marginTop: 15, background: \"#17c3ce\" }}\n          onClick={submitHandler}\n          isLoading={picLoading}\n        >\n          Sign Up\n        </Button>\n      </VStack>\n    </div>\n  );\n};\n\nexport default Signup;\n","export default __webpack_public_path__ + \"static/media/ChattingPic.40efea30.png\";","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport ChattingPng from \"../ChattingPic.png\";\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <div\n      className=\"HomePageWrapper\"\n      style={{\n        display: \"flex\",\n        width: \"100%\",\n        justifyContent: \"space-evenly\",\n        alignContent: \"center\",\n        aliginItems: \"center\",\n      }}\n    >\n      <div className=\"firstBox\" style={{ width: \"50%\", marginTop: \"7%\" }}>\n        <img\n          className=\"ChattingPic\"\n          src={ChattingPng}\n          alt=\"chatting png\"\n          style={{ width: \"70%\", height: \"65vh\", margin: \"auto\" }}\n        />\n      </div>\n      <div className=\"secondBox\" style={{ width: \"50%\", marginTop: \"4%\" }}>\n        <Container maxW=\"xl\">\n          <Box\n            d=\"flex\"\n            justifyContent=\"center\"\n            p={3}\n            w=\"100%\"\n            m=\"100px 0 15px 0\"\n            borderRadius=\"lg\"\n          >\n            <Text\n              fontSize=\"6xl\"\n              fontWeight=\"bold\"\n              color=\"white\"\n              fontFamily=\"Work sans\"\n              className=\"WelcomeText\"\n            >\n              Welcome back\n            </Text>\n          </Box>\n          <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n            <Tabs isFitted variant=\"soft-rounded\">\n              <TabList mb=\"1em\">\n                <Tab>Login</Tab>\n                <Tab>Sign Up</Tab>\n              </TabList>\n              <TabPanels>\n                <TabPanel>\n                  <Login />\n                </TabPanel>\n                <TabPanel>\n                  <Signup />\n                </TabPanel>\n              </TabPanels>\n            </Tabs>\n          </Box>\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#17c3ce\" : \"#BBBBBB\"\n                }`,\n                color: `${m.sender._id === user._id ? \"white\" : \"black\"}`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","export default __webpack_public_path__ + \"static/media/NoChat.666435da.gif\";","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction, user }) => {\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport noChat from \"../NoChat.gif\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box\n          d=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n          style={{ flexDirection: \"column\" }}\n        >\n          <div style={{ width: \"100%\" }}>\n            <img src={noChat} alt=\"chatImg\" />\n          </div>\n          <div>\n            <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n              Click on a user to start chatting\n            </Text>\n          </div>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setSelectedUsers([]);\n      setSearchResult([]);\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  // searchResult = searchResult?.filter((user) => {\n  //   return !selectedUsers?.some((selected) => selected._id === user._id);\n  // });\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: sai, bharat, Ram\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.filter((res) => {\n                  return !selectedUsers.some(\n                    (selected) => selected._id === res._id\n                  );\n                })\n                ?.slice(0, 4)\n                ?.map((u) => (\n                  <UserListItem\n                    key={u._id}\n                    user={u}\n                    handleFunction={() => handleGroup(u)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Input } from \"@chakra-ui/input\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchedValue, setSearchedValue] = useState([]);\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  const filteredData = chats?.filter((item) => {\n    const userMatch = item.users.some((ur) =>\n      ur.name.toLowerCase().includes(search.toLowerCase())\n    );\n\n    const chatNameMatch = item.chatName\n      .toLowerCase()\n      .includes(search.toLowerCase());\n    return userMatch || chatNameMatch;\n  });\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Input\n          placeholder=\"Search by name or group name\"\n          mr={2}\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          focusBorderColor=\"#17c3ce\"\n        />\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {filteredData.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"#02969f\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n        borderRadius=\"10px\"\n      >\n        <Text\n          onClick={() => {\n            history.push(\"/\");\n          }}\n          fontSize=\"2xl\"\n          fontWeight=\"bold\"\n          color=\"white\"\n          fontFamily=\"Work sans\"\n        >\n          {`<Bharat />`}\n        </Text>\n        <Text\n          className=\"HeaderName\"\n          fontSize=\"3xl\"\n          fontWeight=\"bold\"\n          color=\"white\"\n          fontFamily=\"Work sans\"\n        >\n          Chit-Chat\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}